{"version":3,"sources":["components/data/DataManager.js","components/data/Transformations.js","components/helpers/IntegerInput.js","components/charts/ExpGrowthRate.js","components/InfoPanel.js","components/charts/GrowthRatePie.js","components/App.js","serviceWorker.js","index.js"],"names":["dataManager","this","baseData","listeners","name","forEach","listener","callback","concat","data","callListeners","transformation","groupConfirmedByCountryName","covidData","confirmed","locations","reduce","agg","country","h1","h2","countryName","cases","latest","history","Object","keys","day","processData","preProcess","process","postProcess","map","preData","getExpGrowthRateByCountry","historyKeys","firstDate","Date","_","index","slice","filter","length","sliceLog","date","dateCases","logCases","Math","log","getTime","a","regression","linear","equation","result","parseFloat","E","toFixed","daysSinceFirstCase","expGrowth","flatResults","parsedData","apply","groupByRate","percentageRate","condition","count","total","logSlice","rate","type","addToGroup","percent","Number","processUntilLastWeekSlice","sort","b","exponentialGrowthRateByCountry","n","getCountriesWithNCasesOrMore","IntegerInput","onChange","event","value","parseInt","target","isInteger","props","maxLength","Component","antIcon","LoadingOutlined","style","fontSize","spin","ExpGrowthRateChart","updateChartSize","parentElement","document","getElementById","chart","changeSize","offsetWidth","offsetHeight","updateChart","filterNumberOfCases","setState","loaded","changeData","line","position","color","shape","animate","scale","ticks","alias","axis","title","offset","fill","tooltip","showCrosshairs","render","clearTimeout","timeout","setTimeout","getData","state","window","removeEventListener","addEventListener","element","Chart","container","height","renderer","registerListener","className","id","indicator","InfoPanel","children","GrowthRatePie","updateData","interval","label","content","adjust","interaction","coordinate","radius","Header","Layout","Footer","Content","App","showDataDisclaimer","modalVisible","handleCancel","all","then","registerDataFromTransformation","rel","href","visible","footer","onCancel","onClick","Boolean","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.df0c4426.chunk.js","sourcesContent":["// Class to manage all data from charts and how they interact between them\r\n\r\nclass DataManager {\r\n  constructor() {\r\n    this.baseData = {};\r\n    this.listeners = {};\r\n  }\r\n\r\n  // Auxiliary function to call all callbacks registered on name\r\n  callListeners(name) {\r\n    (this.listeners[name] || []).forEach(listener => listener(this.baseData[name]));\r\n  }\r\n\r\n  // Register listener on name. When data on register on a name is changed or registered, all callbacks registered on that name will be called\r\n  registerListener(name, callback) {\r\n    if (!this.listeners[name]) {\r\n      this.listeners[name] = [callback]\r\n    } else {\r\n      this.listeners[name] = this.listeners[name].concat(callback);\r\n    }\r\n\r\n    if (this.baseData[name]) {\r\n      callback(this.baseData[name]);\r\n    }\r\n  }\r\n\r\n  // Register data on a name\r\n  resisterData(name, data) {\r\n    this.baseData[name] = data;\r\n    this.callListeners(name);\r\n  }\r\n\r\n  // Take a data, new or already registered, apply a function on it and save it on a new name\r\n  registerDataFromTransformation(name, baseData, transformation) {\r\n    baseData = typeof baseData === 'string' ? this.baseData[baseData] : baseData;\r\n\r\n    this.baseData[name] = transformation(baseData);\r\n    this.callListeners(name);\r\n  }\r\n\r\n  // Get registered data\r\n  getData(name) {\r\n    return this.baseData[name];\r\n  }\r\n\r\n  // Remove data registry\r\n  removeData(name) {\r\n    delete this.baseData[name];\r\n  }\r\n}\r\n\r\nexport const dataManager = new DataManager();","import regression from 'regression';\r\n\r\n// Get raw data from the API and group the by country name\r\nexport function groupConfirmedByCountryName(covidData) {\r\n  const mergeHistory = (h1, h2) => {\r\n    Object.keys(h1).forEach(day => h2[day] = h2[day] ? h2[day] + h1[day] : h1[day]);\r\n    return h2;\r\n  }\r\n\r\n  const confirmedData = covidData.confirmed;\r\n\r\n  const countries = confirmedData.locations.reduce((agg, country) => {\r\n    const countryName = country.country;\r\n    if (!agg[countryName]) {\r\n      agg[countryName] = {\r\n        name: countryName,\r\n        cases: country.latest,\r\n        history: country.history\r\n      }\r\n    } else {\r\n      agg[countryName] = {\r\n        name: countryName,\r\n        cases: country.latest + agg[countryName].cases,\r\n        history: mergeHistory(country.history, agg[countryName].history)\r\n      }\r\n    }\r\n    return agg;\r\n  }, {});\r\n\r\n  return countries;\r\n}\r\n\r\n// Helper function based on an idea that the transformation is basically taking the value from each coutry,\r\n// apply filters, process it, and post processing the result in some whay.\r\n// This will return a function that will be used as a transformation for the Data Manager\r\nexport function processData(preProcess, process, postProcess) {\r\n  return (covidData) => {\r\n    const data = Object.keys(covidData).map(countryName => {\r\n      const preData = preProcess ? preProcess(countryName)(covidData) : countryName;\r\n      return process ? process(countryName)(covidData, preData) : preData;\r\n    })\r\n    return postProcess ? postProcess(data) : data;\r\n  }\r\n}\r\n\r\n// Pre Processing Functions\r\n// ############################################################\r\n\r\n// Returns a function that will filter the countries that only have 1000 cases or more\r\nexport const getCountriesWithNCasesOrMore = (n) => (countryName) => {\r\n  return (covidData) => {\r\n    const historyKeys = Object.keys(covidData[countryName].history).filter(date => {\r\n      return covidData[countryName].history[date] > 0 && covidData[countryName].cases >= n;\r\n    });\r\n\r\n    historyKeys.sort(function (a, b) {\r\n      a = new Date(a);\r\n      b = new Date(b);\r\n      return a.getTime() - b.getTime();\r\n    });\r\n\r\n    return historyKeys;\r\n  }\r\n}\r\n\r\n// Returns a function that will filter the countries that only have 7 days or more since having its first case\r\nexport function getCountriesWith7DaysOrMore(countryName) {\r\n  return (covidData) => {\r\n    const historyKeys = Object.keys(covidData[countryName].history).filter(date => covidData[countryName].history[date] > 0);\r\n    if (historyKeys.length >= 7) {\r\n\r\n      historyKeys.sort(function (a, b) {\r\n        a = new Date(a);\r\n        b = new Date(b);\r\n        return a.getTime() - b.getTime();\r\n      });\r\n\r\n      return historyKeys;\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n}\r\n// ############################################################\r\n\r\n// Processing Functions\r\n// ############################################################\r\n\r\n// Create weekly windows of history and calculate the linear regression for each country\r\nexport function getExpGrowthRateByCountry(countryName) {\r\n  return (covidData, historyKeys) => {\r\n    const firstDate = new Date(historyKeys[0]);\r\n\r\n    return historyKeys\r\n      .map((_, index) => historyKeys.slice(index, index + 7))\r\n      .filter(slice => slice.length === 7)\r\n      .map(slice => {\r\n        const sliceLog = slice.map(date => {\r\n          const dateCases = covidData[countryName].history[date];\r\n          const logCases = Math.log(dateCases);\r\n\r\n          const caseDate = new Date(date);\r\n          const timeDiff = caseDate.getTime() - firstDate.getTime();\r\n          const timeInDays = timeDiff / (1000 * 3600 * 24);\r\n\r\n\r\n          return [timeInDays + 7, logCases];\r\n        });\r\n\r\n        const a = regression.linear(sliceLog).equation[0];\r\n\r\n        const result = parseFloat((100 * ((Math.E ** a) - 1)).toFixed(2))\r\n\r\n        return {\r\n          name: countryName,\r\n          daysSinceFirstCase: sliceLog[0][0],\r\n          expGrowth: result\r\n        }\r\n      });\r\n  }\r\n}\r\n\r\n// Take the last week of each country and create the log of the cases value on the week \r\nexport function getLastWeekLogSlice(countryName) {\r\n  return (covidData, historyKeys) => {\r\n    const firstDate = new Date(historyKeys[0]);\r\n\r\n    const lastWeek = historyKeys.slice(-7);\r\n\r\n    return lastWeek.map(date => {\r\n      const dateCases = covidData[countryName].history[date];\r\n      const logCases = Math.log(dateCases);\r\n\r\n      const caseDate = new Date(date);\r\n      const timeDiff = caseDate.getTime() - firstDate.getTime();\r\n      const timeInDays = timeDiff / (1000 * 3600 * 24);\r\n\r\n\r\n      return [timeInDays, logCases];\r\n    });\r\n  }\r\n}\r\n// ############################################################\r\n\r\n// Post Processing functions\r\n// ############################################################\r\n\r\n// Take an array of arrays and create a one dimensional array of it\r\nexport function flatResults(parsedData) {\r\n  return [].concat.apply([], parsedData)\r\n}\r\n\r\n// Calculate the linear regression of a window and take the increase percentage rate. Group by percentage rate.\r\nexport function groupByRate(parsedData) {\r\n  const percentageRate = (a) => 100 * ((Math.E ** a) - 1);\r\n  const result = [\r\n    {\r\n      slice: '0% - 10%',\r\n      condition: (a) => percentageRate(a) <= 10,\r\n      count: 0\r\n    },\r\n    {\r\n      slice: '10% - 20%',\r\n      condition: (a) => percentageRate(a) > 10 && percentageRate(a) <= 20,\r\n      count: 0\r\n    },\r\n    {\r\n      slice: '20% - 30%',\r\n      condition: (a) => percentageRate(a) > 20 && percentageRate(a) <= 30,\r\n      count: 0\r\n    },\r\n    {\r\n      slice: '30% - 40%',\r\n      condition: (a) => percentageRate(a) > 30 && percentageRate(a) <= 40,\r\n      count: 0\r\n    },\r\n    {\r\n      slice: '40% - 50%',\r\n      condition: (a) => percentageRate(a) > 40 && percentageRate(a) <= 50,\r\n      count: 0\r\n    },\r\n    {\r\n      slice: '50% - 60%',\r\n      condition: (a) => percentageRate(a) > 50 && percentageRate(a) <= 60,\r\n      count: 0\r\n    },\r\n    {\r\n      slice: '60% - 100%',\r\n      condition: (a) => percentageRate(a) > 60 && percentageRate(a) <= 100,\r\n      count: 0\r\n    },\r\n    {\r\n      slice: '100%>',\r\n      condition: (a) => percentageRate(a) > 100,\r\n      count: 0\r\n    },\r\n  ];\r\n\r\n  const addToGroup = (rate) => {\r\n    result.forEach(type => {\r\n      if (type.condition(rate)) {\r\n        type.count++;\r\n      }\r\n    })\r\n  }\r\n\r\n  let total = 0;\r\n\r\n  parsedData.forEach(logSlice => {\r\n    if (logSlice !== []) {\r\n      const rate = regression.linear(logSlice).equation[0];\r\n\r\n      total++;\r\n\r\n      addToGroup(rate);\r\n    }\r\n  });\r\n\r\n  result.forEach(type => {\r\n    delete type.condition;\r\n    type.percent = Number((type.count / total).toFixed(4));\r\n  });\r\n\r\n  return result;\r\n}\r\n// ############################################################\r\n\r\n\r\nexport const processUntilLastWeekSlice = processData(getCountriesWith7DaysOrMore, getLastWeekLogSlice);\r\n\r\nexport const exponentialGrowthRateByCountry = (n) => processData(getCountriesWithNCasesOrMore(n), getExpGrowthRateByCountry, flatResults);","import React, { Component } from 'react';\r\nimport { Input } from 'antd';\r\n\r\nexport class IntegerInput extends Component {\r\n  onChange = (event) => {\r\n    const value = parseInt(event.target.value);\r\n    if (Number.isInteger(value) && value >= 0) {\r\n      this.props.onChange(value)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Input\r\n        {...this.props}\r\n        maxLength={11}\r\n        onChange={this.onChange}\r\n      />\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { Chart } from '@antv/g2';\r\nimport { dataManager } from '../data/DataManager';\r\nimport { exponentialGrowthRateByCountry } from '../data/Transformations';\r\nimport { IntegerInput } from '../helpers/IntegerInput';\r\nimport { Spin } from 'antd';\r\nimport { LoadingOutlined } from '@ant-design/icons';\r\n\r\nconst antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\r\n\r\nexport class ExpGrowthRateChart extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      value: 1000,\r\n      loaded: false\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.updateChartSize);\r\n  }\r\n\r\n  updateChartSize = () => {\r\n    const parentElement = document.getElementById('expGrowthContainer');\r\n    this.chart.changeSize(parentElement.offsetWidth - 10, parentElement.offsetHeight >= 350 ? parentElement.offsetHeight - 10 : 350);\r\n  }\r\n\r\n  updateChart = (covidData, filterNumberOfCases = 1000) => {\r\n    this.setState({ loaded: true })\r\n    covidData = exponentialGrowthRateByCountry(filterNumberOfCases)(covidData);\r\n\r\n    this.chart.changeData(covidData);\r\n\r\n    this.chart\r\n      .line()\r\n      .position('daysSinceFirstCase*expGrowth')\r\n      .color('name')\r\n      .shape('smooth')\r\n      .animate(false);\r\n\r\n    this.chart.scale('daysSinceFirstCase', {\r\n      ticks: [7, 20, 40, 60],\r\n      alias: 'Dias a partir do primeiro caso'\r\n    });\r\n\r\n    this.chart.axis('daysSinceFirstCase', {\r\n      title: {\r\n        offset: 20,\r\n        style: {\r\n          fill: '#aaa'\r\n        }\r\n      }\r\n    });\r\n\r\n    this.chart.scale('expGrowth', {\r\n      alias: 'Taxa de crescimento percentual'\r\n    });\r\n\r\n    this.chart.axis('expGrowth', {\r\n      title: {\r\n        offset: 20,\r\n        style: {\r\n          fill: '#aaa'\r\n        }\r\n      }\r\n    });\r\n\r\n    this.chart.tooltip({\r\n      showCrosshairs: true,\r\n    });\r\n\r\n    this.chart.render();\r\n    this.updateChartSize();\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('resize', this.updateChartSize);\r\n    const element = document.getElementById('expGrowthContainer');\r\n    this.chart = new Chart({\r\n      container: element,\r\n      height: 0,\r\n      renderer: 'canvas'\r\n    });\r\n\r\n    dataManager.registerListener('base', this.updateChart);\r\n  }\r\n\r\n  onChange = (value) => {\r\n    this.setState({ value });\r\n\r\n    // Debounce value to not redraw the chart too many times\r\n    clearTimeout(this.timeout);\r\n    this.timeout = setTimeout(() => this.updateChart(dataManager.getData('base'), value), 200)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"chart\" id=\"expGrowthContainer\">\r\n          {this.state.loaded ? null : <Spin indicator={antIcon} />}\r\n        </div>\r\n        <div className=\"inpFlex\">\r\n          <span>Número de Casos Acumulados: </span>\r\n          <IntegerInput value={this.state.value} onChange={this.onChange} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\n\r\nexport class InfoPanel extends Component {\r\n  render() {\r\n    return(\r\n      <div className=\"InfoPanel container\">\r\n        <h2>{this.props.title}</h2>\r\n        { this.props.children }\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { Chart } from '@antv/g2';\r\nimport { dataManager } from '../data/DataManager';\r\nimport { groupByRate } from '../data/Transformations';\r\nimport { Spin } from 'antd';\r\nimport { LoadingOutlined } from '@ant-design/icons';\r\n\r\nconst antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\r\n\r\nexport class GrowthRatePie extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      loaded: false\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.updateChartSize);\r\n  }\r\n\r\n  updateChartSize = () => {\r\n    const element = document.getElementById('growthRatePieContainer');\r\n    this.chart.changeSize(element.offsetWidth - 10, element.offsetHeight >= 350 ? element.offsetHeight - 42 : 350);\r\n  }\r\n\r\n  updateData = (covidData) => {\r\n    this.setState({ loaded: true })\r\n    covidData = groupByRate(covidData);\r\n\r\n    this.chart.changeData(covidData);\r\n\r\n    this.chart\r\n      .interval()\r\n      .position('percent')\r\n      .color('slice')\r\n      .label('percent', {\r\n        content: (data) => {\r\n          return `${(data.percent * 100).toFixed(0)}%`;\r\n        },\r\n      })\r\n      .adjust('stack');\r\n\r\n    this.chart.interaction('element-active');\r\n\r\n    this.chart.coordinate('theta', {\r\n      radius: 0.75,\r\n    });\r\n\r\n    this.chart.tooltip(false);\r\n\r\n    this.chart.render();\r\n    this.updateChartSize();\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('resize', this.updateChartSize);\r\n    const element = document.getElementById('growthRatePieContainer');\r\n\r\n    this.chart = new Chart({\r\n      container: element,\r\n      height: 0,\r\n      renderer: 'canvas'\r\n    });\r\n\r\n    this.chart.coordinate('theta', {\r\n      radius: 0.75,\r\n    });\r\n\r\n    dataManager.registerListener('lastWeekSlice', this.updateData);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"growthRatePieContainer\" className=\"container chart\">\r\n        {this.state.loaded ? null : <Spin indicator={antIcon} />}\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\nimport data from 'jhucsse.covid'\nimport { ExpGrowthRateChart } from './charts/ExpGrowthRate';\nimport '../style/App.css';\nimport { InfoPanel } from './InfoPanel';\nimport { GrowthRatePie } from './charts/GrowthRatePie';\nimport { dataManager } from './data/DataManager';\nimport { groupConfirmedByCountryName, processUntilLastWeekSlice } from './data/Transformations';\nimport { Layout, Button, Modal } from 'antd';\n\nconst { Header, Footer, Content } = Layout;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      modalVisible: false\n    }\n  }\n\n  componentDidMount() {\n    data.all().then((covidData) => {\n      dataManager.registerDataFromTransformation('base', covidData, groupConfirmedByCountryName);\n      dataManager.registerDataFromTransformation('lastWeekSlice', 'base', processUntilLastWeekSlice);\n    });\n  }\n\n  showDataDisclaimer = () => {\n    this.setState({ modalVisible: true });\n  }\n\n  handleCancel = () => {\n    this.setState({ modalVisible: false });\n  }\n\n  render() {\n    return (\n      <Layout className=\"App\">\n        <Header className=\"header\">\n          <div className=\"headerContent\">\n            <span className=\"title\">Análise sobre as tendências da pandemia de COVID-19</span>\n            <a className=\"link\" rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://www.medrxiv.org/content/10.1101/2020.03.19.20037192v1\">\n              Artigo\n            </a>\n          </div>\n        </Header>\n        <Content className=\"content\">\n          <div className=\"mainContainer\">\n            <div className=\"row\">\n              <ExpGrowthRateChart />\n              <InfoPanel title=\"Taxa de crescimento exponencial\">\n                <p>\n                  A taxa, em percentual de aumento diário de casos, é mostrada na figura da esquerda\n                  como uma curva que varia no tempo, a partir do primeiro dia do surto de cada pais.\n                <br />\n                  <br />\n\n                Passando o mouse por cima da uma curva se visualiza o nome do país\n                junto com dois números: o da esquerda indica o dia a contar do inicio local da epidemia,\n                o da direita o valor da taxa de crescimento desse dia.\n                Na janela pode ser definido um filtro numérico, para mostrar os países com\n                mais casos que o valor do filtro.\n\n                <br />\n                  <br />\n\n                Os valores das taxas foram estimados a partir da média em um intervalo dos últimos sete dias de casos.\n                (mais detalhes no link do artigo).\n                Por conta disso, cada curva inicia-se no 7º dia de casos e o último valor de cada curva corresponde a taxa média do dia atual.\n                O padrão diferente de cada curva é um forte indicativo da forma em que cada pais\n                enfrentou e enfrenta a epidemia.\n                Destaca-se o pico de Itália no dia 26 (24 Fevereiro 2020), quando a taxa de\n                aumento diário chegou a ser de 140%. Isso significa que os casos desse dia duplicaram em apenas 17hs!\n\n                <br />\n                  <br />\n\n                Com poucas exceções (China, S. Korea ou US), o pico da taxa, geralmente maior do que 50%, aparece como\n                uma caraterística comum a quase todos os países com mais de 5000 casos até 30 de Março.\n                Depois do forte declínio posterior, correspondente a implantação de medidas de mitigação (como fechamento de escolas e comércios ou até mesmo quarentenas e controle de movimento), segue uma descida suave (a valores entre 10-20%). Na nossa interpretação, isso indica a necessidade de medidas mais fortes e de controles mais estritos\n                para conseguir o controle da epidemia.\n                </p>\n              </InfoPanel>\n            </div>\n            <div className=\"row\">\n              <InfoPanel title=\"Taxa de crescimento por dia\">\n                <p>\n                  No chart da direita podemos ver a distribuição da taxa de crescimento atual\n                  entre os países. O tamanho e valor da porção representam o percentual de países\n                  com uma taxa dentro de um intervalo.\n\n                <br />\n                  <br />\n                  Os países que conseguiram controlar a epidemia (como China e South Korea), se mantendo\n                  em regime sub-exponencial (ou com R0 &lt; 1), ou aparentam estar próximos de controlar (Japão),\n                  tem taxas inferiores a 10% (porção azul, 0-10%).\n                  Porém, quase todos os países estão ou continuam em regime de crescimento exponencial,\n                  independentemente da data inicial do surto, com taxas acima de 10%.\n\n                <br />\n                  <br />\n\n                  Para se ter uma melhor ideia do significado de uma taxa superior a 10%,\n                  uma taxa de 20%, por exemplo, significa que o número de casos duplica em menos de 4 dias.\n                  E que se esse cenário for mantido por um mês, um país que hoje tem 1000 casos passará a ter 237000!\n\n                </p>\n              </InfoPanel>\n              <GrowthRatePie />\n            </div>\n          </div>\n          <Modal\n            title=\"Esclarecimento sobre Uso de Dados\"\n            visible={this.state.modalVisible}\n            footer={null}\n            onCancel={this.handleCancel}\n          >\n            <p>\n              Os dados utilizados são atualizados diariamente do Data Repository by Center for\n              Systems Science and Engineering.\n              <br />\n              <a className=\"link\" rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://github.com/CSSEGISandData/COVID-19\">\n                JHU CSSE 2020\n              </a>.\n\n              <br />\n              <br />\n\n              As analises completas e métodos utilizados estão publicados em\n              <br />\n              <a className=\"link\" rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://www.medrxiv.org/content/10.1101/2020.03.19.20037192v1\">\n                Trend analysis of the COVID-19 pandemic in China and the rest of the world, Albertine Weber, Flavio Iannelli, Sebastian Gonçalves\n              </a>.\n            </p>\n          </Modal>\n        </Content>\n        <Footer className=\"footer\">\n          <span>Feito por João Pedro Pianta, Albertine Weber e Sebastian Gonçalves</span>\n          <span>\n            <Button type=\"link\" onClick={this.showDataDisclaimer}>\n              Esclarecimento sobre uso de Dados\n            </Button>\n          </span>\n        </Footer>\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}