{"version":3,"sources":["i18n.js","components/data/DataManager.js","components/data/Transformations.js","components/helpers/IntegerInput.js","components/helpers/languageController.js","components/charts/ExpGrowthRate.js","components/InfoPanel.js","components/charts/GrowthRatePie.js","components/Header.js","components/App.js","serviceWorker.js","index.js"],"names":["resources","pt","translation","en","i18n","use","initReactI18next","init","fallbackLng","debug","interpolation","escapeValue","dataManager","this","baseData","listeners","name","forEach","listener","callback","concat","data","callListeners","transformation","groupConfirmedByCountryName","covidData","confirmed","locations","reduce","agg","country","h1","h2","countryName","cases","latest","history","Object","keys","day","processData","preProcess","process","postProcess","map","preData","getExpGrowthRateByCountry","historyKeys","firstDate","Date","_","index","slice","filter","length","sliceLog","date","dateCases","logCases","Math","log","getTime","a","regression","linear","equation","result","parseFloat","E","toFixed","daysSinceFirstCase","expGrowth","flatResults","parsedData","apply","groupByRate","percentageRate","condition","count","total","logSlice","rate","type","addToGroup","percent","Number","processUntilLastWeekSlice","sort","b","exponentialGrowthRateByCountry","n","getCountriesWithNCasesOrMore","IntegerInput","onChange","event","value","parseInt","target","isInteger","props","maxLength","Component","languageController","onLanguageChange","lng","callbacks","push","antIcon","LoadingOutlined","style","fontSize","spin","ExpGrowthRateChart","updateChartSize","parentElement","document","getElementById","chart","changeSize","offsetWidth","offsetHeight","setAxis","scale","ticks","alias","t","axis","title","offset","fill","tooltip","showCrosshairs","render","updateChart","filterNumberOfCases","setState","loaded","changeData","line","position","color","shape","animate","clearTimeout","timeout","setTimeout","getData","state","window","removeEventListener","addEventListener","element","Chart","container","height","renderer","registerListener","addCallback","className","id","indicator","withTranslation","InfoPanel","children","GrowthRatePie","updateData","interval","adjust","interaction","coordinate","radius","showTitle","showMarkers","Header","Layout","AppHeader","useTranslation","rel","href","Group","defaultValue","size","e","changeLanguage","Button","Footer","Content","App","showDataDisclaimer","modalVisible","handleCancel","all","then","registerDataFromTransformation","ExpGrowthRate","visible","footer","onCancel","onClick","Boolean","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sQAKMA,EAAY,CAChBC,GAAI,CACFC,Y,OAEFC,GAAI,CACFD,Y,QAIJE,IAEGC,IAAIC,KAGJC,KAAK,CACJP,YACAQ,YAAa,KACbC,OAAO,EAEPC,cAAe,CACbC,aAAa,KAKJP,EAAf,EAAeA,I,wDCqBFQ,EAAc,I,WAhDzB,aAAe,oBACbC,KAAKC,SAAW,GAChBD,KAAKE,UAAY,G,0DAILC,GAAO,IAAD,QACjBH,KAAKE,UAAUC,IAAS,IAAIC,SAAQ,SAAAC,GAAQ,OAAIA,EAAS,EAAKJ,SAASE,S,uCAIzDA,EAAMG,GAChBN,KAAKE,UAAUC,GAGlBH,KAAKE,UAAUC,GAAQH,KAAKE,UAAUC,GAAMI,OAAOD,GAFnDN,KAAKE,UAAUC,GAAQ,CAACG,GAKtBN,KAAKC,SAASE,IAChBG,EAASN,KAAKC,SAASE,M,mCAKdA,EAAMK,GACjBR,KAAKC,SAASE,GAAQK,EACtBR,KAAKS,cAAcN,K,qDAIUA,EAAMF,EAAUS,GAC7CT,EAA+B,kBAAbA,EAAwBD,KAAKC,SAASA,GAAYA,EAEpED,KAAKC,SAASE,GAAQO,EAAeT,GACrCD,KAAKS,cAAcN,K,8BAIbA,GACN,OAAOH,KAAKC,SAASE,K,iCAIZA,UACFH,KAAKC,SAASE,O,uBC5ClB,SAASQ,EAA4BC,GA0B1C,OApBsBA,EAAUC,UAEAC,UAAUC,QAAO,SAACC,EAAKC,GACrD,IARoBC,EAAIC,EAQlBC,EAAcH,EAAQA,QAc5B,OAbKD,EAAII,GAOPJ,EAAII,GAAe,CACjBjB,KAAMiB,EACNC,MAAOJ,EAAQK,OAASN,EAAII,GAAaC,MACzCE,SAnBgBL,EAmBMD,EAAQM,QAnBVJ,EAmBmBH,EAAII,GAAaG,QAlB5DC,OAAOC,KAAKP,GAAId,SAAQ,SAAAsB,GAAG,OAAIP,EAAGO,GAAOP,EAAGO,GAAOP,EAAGO,GAAOR,EAAGQ,GAAOR,EAAGQ,MACnEP,IAQLH,EAAII,GAAe,CACjBjB,KAAMiB,EACNC,MAAOJ,EAAQK,OACfC,QAASN,EAAQM,SASdP,IACN,IAQE,SAASW,EAAYC,EAAYC,EAASC,GAC/C,OAAO,SAAClB,GACN,IAAMJ,EAAOgB,OAAOC,KAAKb,GAAWmB,KAAI,SAAAX,GACtC,IAAMY,EAAUJ,EAAaA,EAAWR,EAAXQ,CAAwBhB,GAAaQ,EAClE,OAAOS,EAAUA,EAAQT,EAARS,CAAqBjB,EAAWoB,GAAWA,KAE9D,OAAOF,EAAcA,EAAYtB,GAAQA,GAgDtC,SAASyB,EAA0Bb,GACxC,OAAO,SAACR,EAAWsB,GACjB,IAAMC,EAAY,IAAIC,KAAKF,EAAY,IAEvC,OAAOA,EACJH,KAAI,SAACM,EAAGC,GAAJ,OAAcJ,EAAYK,MAAMD,EAAOA,EAAQ,MACnDE,QAAO,SAAAD,GAAK,OAAqB,IAAjBA,EAAME,UACtBV,KAAI,SAAAQ,GACH,IAAMG,EAAWH,EAAMR,KAAI,SAAAY,GACzB,IAAMC,EAAYhC,EAAUQ,GAAaG,QAAQoB,GAC3CE,EAAWC,KAAKC,IAAIH,GAO1B,MAAO,EALU,IAAIR,KAAKO,GACAK,UAAYb,EAAUa,WACrB,MAGN,EAAGH,MAGpBI,EAAIC,IAAWC,OAAOT,GAAUU,SAAS,GAEzCC,EAASC,YAAY,KAAO,SAACR,KAAKS,EAAKN,GAAK,IAAIO,QAAQ,IAE9D,MAAO,CACLrD,KAAMiB,EACNqC,mBAAoBf,EAAS,GAAG,GAChCgB,UAAWL,OAgCd,SAASM,EAAYC,GAC1B,MAAO,GAAGrD,OAAOsD,MAAM,GAAID,GAItB,SAASE,EAAYF,GAC1B,IAAMG,EAAiB,SAACd,GAAD,OAAO,KAAO,SAACH,KAAKS,EAAKN,GAAK,IAC/CI,EAAS,CACb,CACEd,MAAO,WACPyB,UAAW,SAACf,GAAD,OAAOc,EAAed,IAAM,IACvCgB,MAAO,GAET,CACE1B,MAAO,YACPyB,UAAW,SAACf,GAAD,OAAOc,EAAed,GAAK,IAAMc,EAAed,IAAM,IACjEgB,MAAO,GAET,CACE1B,MAAO,YACPyB,UAAW,SAACf,GAAD,OAAOc,EAAed,GAAK,IAAMc,EAAed,IAAM,IACjEgB,MAAO,GAET,CACE1B,MAAO,YACPyB,UAAW,SAACf,GAAD,OAAOc,EAAed,GAAK,IAAMc,EAAed,IAAM,IACjEgB,MAAO,GAET,CACE1B,MAAO,YACPyB,UAAW,SAACf,GAAD,OAAOc,EAAed,GAAK,IAAMc,EAAed,IAAM,IACjEgB,MAAO,GAET,CACE1B,MAAO,YACPyB,UAAW,SAACf,GAAD,OAAOc,EAAed,GAAK,IAAMc,EAAed,IAAM,IACjEgB,MAAO,GAET,CACE1B,MAAO,aACPyB,UAAW,SAACf,GAAD,OAAOc,EAAed,GAAK,IAAMc,EAAed,IAAM,KACjEgB,MAAO,GAET,CACE1B,MAAO,QACPyB,UAAW,SAACf,GAAD,OAAOc,EAAed,GAAK,KACtCgB,MAAO,IAYPC,EAAQ,EAiBZ,OAfAN,EAAWxD,SAAQ,SAAA+D,GACjB,GAAIA,IAAa,GAAI,CACnB,IAAMC,EAAOlB,IAAWC,OAAOgB,GAAUf,SAAS,GAElDc,IAde,SAACE,GAClBf,EAAOjD,SAAQ,SAAAiE,GACTA,EAAKL,UAAUI,IACjBC,EAAKJ,WAaPK,CAAWF,OAIff,EAAOjD,SAAQ,SAAAiE,UACNA,EAAKL,UACZK,EAAKE,QAAUC,QAAQH,EAAKJ,MAAQC,GAAOV,QAAQ,OAG9CH,EAKF,IAAMoB,EAA4B9C,GAlKlC,SAAqCP,GAC1C,OAAO,SAACR,GACN,IAAMsB,EAAcV,OAAOC,KAAKb,EAAUQ,GAAaG,SAASiB,QAAO,SAAAG,GAAI,OAAI/B,EAAUQ,GAAaG,QAAQoB,GAAQ,KACtH,OAAIT,EAAYO,QAAU,GAExBP,EAAYwC,MAAK,SAAUzB,EAAG0B,GAG5B,OAFA1B,EAAI,IAAIb,KAAKa,GACb0B,EAAI,IAAIvC,KAAKuC,GACN1B,EAAED,UAAY2B,EAAE3B,aAGlBd,GAEA,OA4CN,SAA6Bd,GAClC,OAAO,SAACR,EAAWsB,GACjB,IAAMC,EAAY,IAAIC,KAAKF,EAAY,IAIvC,OAFiBA,EAAYK,OAAO,GAEpBR,KAAI,SAAAY,GAClB,IAAMC,EAAYhC,EAAUQ,GAAaG,QAAQoB,GAC3CE,EAAWC,KAAKC,IAAIH,GAO1B,MAAO,EALU,IAAIR,KAAKO,GACAK,UAAYb,EAAUa,WACrB,MAGPH,UA4Fb+B,EAAiC,SAACC,GAAD,OAAOlD,EArLT,SAACkD,GAAD,OAAO,SAACzD,GAClD,OAAO,SAACR,GACN,IAAMsB,EAAcV,OAAOC,KAAKb,EAAUQ,GAAaG,SAASiB,QAAO,SAAAG,GACrE,OAAO/B,EAAUQ,GAAaG,QAAQoB,GAAQ,GAAK/B,EAAUQ,GAAaC,OAASwD,KASrF,OANA3C,EAAYwC,MAAK,SAAUzB,EAAG0B,GAG5B,OAFA1B,EAAI,IAAIb,KAAKa,GACb0B,EAAI,IAAIvC,KAAKuC,GACN1B,EAAED,UAAY2B,EAAE3B,aAGlBd,IAyKsD4C,CAA6BD,GAAI5C,EAA2B0B,I,SCnOhHoB,EAAb,4MACEC,SAAW,SAACC,GACV,IAAMC,EAAQC,SAASF,EAAMG,OAAOF,OAChCV,OAAOa,UAAUH,IAAUA,GAAS,GACtC,EAAKI,MAAMN,SAASE,IAJ1B,uDASI,OACE,kBAAC,IAAD,iBACMlF,KAAKsF,MADX,CAEEC,UAAW,GACXP,SAAUhF,KAAKgF,gBAbvB,GAAkCQ,a,kBCWrBC,EAAqB,I,WAbhC,aAAe,IAAD,gCAQdC,iBAAmB,SAACC,GAClB,EAAKC,UAAUxF,SAAQ,SAAAE,GAAQ,OAAIA,EAASqF,OAR5C3F,KAAK4F,UAAY,G,wDAGPtF,GACVN,KAAK4F,UAAUC,KAAKvF,O,MCIlBwF,EAAU,kBAACC,EAAA,EAAD,CAAiBC,MAAO,CAAEC,SAAU,IAAMC,MAAI,IAExDC,E,kDACJ,aAAe,IAAD,8BACZ,gBAYFC,gBAAkB,WAChB,IAAMC,EAAgBC,SAASC,eAAe,sBAC9C,EAAKC,MAAMC,WAAWJ,EAAcK,YAAc,GAAIL,EAAcM,cAAgB,IAAMN,EAAcM,aAAe,GAAK,MAfhH,EAkBdC,QAAU,WACR,EAAKJ,MAAMK,MAAM,qBAAsB,CACrCC,MAAO,CAAC,EAAG,GAAI,GAAI,IACnBC,MAAO,EAAKzB,MAAM0B,EAAE,mCAGtB,EAAKR,MAAMS,KAAK,qBAAsB,CACpCC,MAAO,CACLC,OAAQ,GACRnB,MAAO,CACLoB,KAAM,WAKZ,EAAKZ,MAAMK,MAAM,YAAa,CAC5BE,MAAO,EAAKzB,MAAM0B,EAAE,mCAGtB,EAAKR,MAAMS,KAAK,YAAa,CAC3BC,MAAO,CACLC,OAAQ,GACRnB,MAAO,CACLoB,KAAM,WAKZ,EAAKZ,MAAMa,QAAQ,CACjBC,gBAAgB,IAGlB,EAAKd,MAAMe,UAlDC,EAqDdC,YAAc,SAAC5G,GAA2C,IAAhC6G,EAA+B,uDAAT,IAC9C,EAAKC,SAAS,CAAEC,QAAQ,IACxB/G,EAAYgE,EAA+B6C,EAA/B7C,CAAoDhE,GAEhE,EAAK4F,MAAMoB,WAAWhH,GAEtB,EAAK4F,MACFqB,OACAC,SAAS,gCACTC,MAAM,QACNC,MAAM,UACNC,SAAQ,GAEX,EAAKrB,UACL,EAAKR,mBAnEO,EAmFdpB,SAAW,SAACE,GACV,EAAKwC,SAAS,CAAExC,UAGhBgD,aAAa,EAAKC,SAClB,EAAKA,QAAUC,YAAW,kBAAM,EAAKZ,YAAYzH,EAAYsI,QAAQ,QAASnD,KAAQ,MArFtF,EAAKoD,MAAQ,CACXpD,MAAO,IACPyC,QAAQ,GALE,E,mEAUZY,OAAOC,oBAAoB,SAAUxI,KAAKoG,mB,0CA6D1CmC,OAAOE,iBAAiB,SAAUzI,KAAKoG,iBACvC,IAAMsC,EAAUpC,SAASC,eAAe,sBACxCvG,KAAKwG,MAAQ,IAAImC,QAAM,CACrBC,UAAWF,EACXG,OAAQ,EACRC,SAAU,WAGZ/I,EAAYgJ,iBAAiB,OAAQ/I,KAAKwH,aAC1C/B,EAAmBuD,YAAYhJ,KAAK4G,W,+BAYpC,OACE,yBAAKqC,UAAU,aACb,yBAAKA,UAAU,QAAQC,GAAG,sBACvBlJ,KAAKsI,MAAMX,OAAS,KAAO,kBAAC,IAAD,CAAMwB,UAAWrD,KAE/C,yBAAKmD,UAAU,WACf,8BAAOjJ,KAAKsF,MAAM0B,EAAE,oCAApB,MACE,kBAAC,EAAD,CAAc9B,MAAOlF,KAAKsI,MAAMpD,MAAOF,SAAUhF,KAAKgF,iB,GApG/BQ,aA2GlB4D,gBAAkBjD,GCrHpBkD,G,OAAb,uKAEI,OACE,yBAAKJ,UAAU,uBACb,4BAAKjJ,KAAKsF,MAAM4B,OACdlH,KAAKsF,MAAMgE,cALrB,GAA+B9D,cCKzBM,EAAU,kBAACC,EAAA,EAAD,CAAiBC,MAAO,CAAEC,SAAU,IAAMC,MAAI,IAEjDqD,EAAb,kDACE,aAAe,IAAD,8BACZ,gBAWFnD,gBAAkB,WAChB,IAAMsC,EAAUpC,SAASC,eAAe,0BACxC,EAAKC,MAAMC,WAAWiC,EAAQhC,YAAc,GAAIgC,EAAQ/B,cAAgB,IAAM+B,EAAQ/B,aAAe,GAAK,MAd9F,EAiBd6C,WAAa,SAAC5I,GACZ,EAAK8G,SAAS,CAAEC,QAAQ,IACxB/G,EAAYkD,EAAYlD,GAExB,EAAK4F,MAAMoB,WAAWhH,GAEtB,EAAK4F,MACFiD,WACA3B,SAAS,WACTC,MAAM,SACNV,QAAQ,iBAAiB,SAAC9E,EAAOgC,GAChC,MAAO,CACLpE,KAAMoC,EACN2C,MAAM,GAAD,QAAgB,IAAVX,GAAef,QAAQ,GAA7B,SAGRkG,OAAO,SAEV,EAAKlD,MAAMmD,YAAY,kBAEvB,EAAKnD,MAAMoD,WAAW,QAAS,CAC7BC,OAAQ,MAGV,EAAKrD,MAAMa,QAAQ,CACjByC,WAAW,EACXC,aAAa,IAGf,EAAKvD,MAAMe,SACX,EAAKnB,mBA5CL,EAAKkC,MAAQ,CACXX,QAAQ,GAJE,EADhB,mEAUIY,OAAOC,oBAAoB,SAAUxI,KAAKoG,mBAV9C,0CAoDImC,OAAOE,iBAAiB,SAAUzI,KAAKoG,iBACvC,IAAMsC,EAAUpC,SAASC,eAAe,0BAExCvG,KAAKwG,MAAQ,IAAImC,QAAM,CACrBC,UAAWF,EACXG,OAAQ,EACRC,SAAU,WAGZ9I,KAAKwG,MAAMoD,WAAW,QAAS,CAC7BC,OAAQ,MAGV9J,EAAYgJ,iBAAiB,gBAAiB/I,KAAKwJ,cAjEvD,+BAqEI,OACE,yBAAKN,GAAG,yBAAyBD,UAAU,mBACxCjJ,KAAKsI,MAAMX,OAAS,KAAO,kBAAC,IAAD,CAAMwB,UAAWrD,SAvErD,GAAmCN,a,mCCJ3BwE,EAAWC,IAAXD,OAED,SAASE,IAAa,IAAD,EACNC,cAAZnD,EADkB,EAClBA,EAAGzH,EADe,EACfA,KAMX,OACE,kBAACyK,EAAD,CAAQf,UAAU,UAChB,yBAAKA,UAAU,iBACb,0BAAMA,UAAU,SAASjC,EAAE,iBAC3B,uBAAGiC,UAAU,OAAOmB,IAAI,sBAAsBhF,OAAO,SAASiF,KAAK,iEAChErD,EAAE,oBAGP,kBAAC,IAAMsD,MAAP,CAAaC,aAAa,KAAKC,KAAK,QAAQxF,SAbzB,SAACyF,GACtB,IAAM9E,EAAM8E,EAAErF,OAAOF,MACrB3F,EAAKmL,eAAe/E,EAAKF,EAAmBC,oBAYxC,kBAAC,IAAMiF,OAAP,CAAczF,MAAM,MAApB,MACA,kBAAC,IAAMyF,OAAP,CAAczF,MAAM,MAApB,Q,ICZA0F,EAAoBX,IAApBW,OAAQC,EAAYZ,IAAZY,QAyGDC,E,kDAtGb,WAAYxF,GAAQ,IAAD,8BACjB,cAAMA,IAcRyF,mBAAqB,WACnB,EAAKrD,SAAS,CAAEsD,cAAc,KAhBb,EAmBnBC,aAAe,WACb,EAAKvD,SAAS,CAAEsD,cAAc,KAjB9B,EAAK1C,MAAQ,CACX0C,cAAc,GAJC,E,gEASjBxK,IAAK0K,MAAMC,MAAK,SAACvK,GACfb,EAAYqL,+BAA+B,OAAQxK,EAAWD,GAC9DZ,EAAYqL,+BAA+B,gBAAiB,OAAQ3G,Q,+BAY9D,IAAD,OACP,OACE,kBAAC,IAAD,MAEI,SAAAuC,GAAC,OACC,kBAAC,IAAD,CAAQiC,UAAU,OAChB,kBAACiB,EAAD,MACA,kBAACW,EAAD,CAAS5B,UAAU,WACjB,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,OACb,kBAACoC,EAAD,MACA,kBAAC,EAAD,CAAWnE,MAAOF,EAAE,4BAClB,2BACGA,EAAE,+BACH,6BACA,6BACCA,EAAE,+BACH,6BACA,6BACCA,EAAE,+BACH,6BACA,6BACCA,EAAE,kCAIT,yBAAKiC,UAAU,OACb,kBAAC,EAAD,CAAW/B,MAAOF,EAAE,6BAClB,2BACGA,EAAE,gCACH,6BACA,6BACCA,EAAE,gCACH,6BACA,6BACCA,EAAE,kCAGP,kBAAC,EAAD,QAGJ,kBAAC,IAAD,CACEE,MAAOF,EAAE,2BACTsE,QAAS,EAAKhD,MAAM0C,aACpBO,OAAQ,KACRC,SAAU,EAAKP,cAEf,2BACGjE,EAAE,+BACH,6BACA,uBAAGiC,UAAU,OAAOmB,IAAI,sBAAsBhF,OAAO,SAASiF,KAAK,8CAAnE,iBAHF,IAME,6BACA,6BACCrD,EAAE,+BACH,6BACA,uBAAGiC,UAAU,OAAOmB,IAAI,sBAAsBhF,OAAO,SAASiF,KAAK,iEAAnE,wIAVF,OAgBJ,kBAACO,EAAD,CAAQ3B,UAAU,UAChB,8BAAOjC,EAAE,kBACT,8BACE,kBAAC,IAAD,CAAQ3C,KAAK,OAAOoH,QAAS,EAAKV,oBAC/B/D,EAAE,sC,GA3FLxB,aCFEkG,QACW,cAA7BnD,OAAOoD,SAASC,UAEe,UAA7BrD,OAAOoD,SAASC,UAEhBrD,OAAOoD,SAASC,SAASC,MACvB,2DCXNC,IAASvE,OACP,kBAAC,IAAMwE,WAAP,KACE,kBAAC,EAAD,OAEFzF,SAASC,eAAe,SDwHpB,kBAAmByF,WACrBA,UAAUC,cAAcC,MACrBf,MAAK,SAAAgB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.08991762.chunk.js","sourcesContent":["import i18n from 'i18next';\r\nimport { initReactI18next } from 'react-i18next';\r\nimport ptTranslation from './i18n/pt.json';\r\nimport enTranslation from './i18n/en.json';\r\n\r\nconst resources = {\r\n  pt: {\r\n    translation: ptTranslation\r\n  },\r\n  en: {\r\n    translation: enTranslation\r\n  }\r\n}\r\n\r\ni18n\r\n  // pass the i18n instance to react-i18next.\r\n  .use(initReactI18next)\r\n  // init i18next\r\n  // for all options read: https://www.i18next.com/overview/configuration-options\r\n  .init({\r\n    resources,\r\n    fallbackLng: 'en',\r\n    debug: true,\r\n\r\n    interpolation: {\r\n      escapeValue: false, // not needed for react as it escapes by default\r\n    }\r\n  });\r\n\r\n\r\nexport default i18n;","// Class to manage all data from charts and how they interact between them\r\n\r\nclass DataManager {\r\n  constructor() {\r\n    this.baseData = {};\r\n    this.listeners = {};\r\n  }\r\n\r\n  // Auxiliary function to call all callbacks registered on name\r\n  callListeners(name) {\r\n    (this.listeners[name] || []).forEach(listener => listener(this.baseData[name]));\r\n  }\r\n\r\n  // Register listener on name. When data on register on a name is changed or registered, all callbacks registered on that name will be called\r\n  registerListener(name, callback) {\r\n    if (!this.listeners[name]) {\r\n      this.listeners[name] = [callback]\r\n    } else {\r\n      this.listeners[name] = this.listeners[name].concat(callback);\r\n    }\r\n\r\n    if (this.baseData[name]) {\r\n      callback(this.baseData[name]);\r\n    }\r\n  }\r\n\r\n  // Register data on a name\r\n  resisterData(name, data) {\r\n    this.baseData[name] = data;\r\n    this.callListeners(name);\r\n  }\r\n\r\n  // Take a data, new or already registered, apply a function on it and save it on a new name\r\n  registerDataFromTransformation(name, baseData, transformation) {\r\n    baseData = typeof baseData === 'string' ? this.baseData[baseData] : baseData;\r\n\r\n    this.baseData[name] = transformation(baseData);\r\n    this.callListeners(name);\r\n  }\r\n\r\n  // Get registered data\r\n  getData(name) {\r\n    return this.baseData[name];\r\n  }\r\n\r\n  // Remove data registry\r\n  removeData(name) {\r\n    delete this.baseData[name];\r\n  }\r\n}\r\n\r\nexport const dataManager = new DataManager();","import regression from 'regression';\r\n\r\n// Get raw data from the API and group the by country name\r\nexport function groupConfirmedByCountryName(covidData) {\r\n  const mergeHistory = (h1, h2) => {\r\n    Object.keys(h1).forEach(day => h2[day] = h2[day] ? h2[day] + h1[day] : h1[day]);\r\n    return h2;\r\n  }\r\n\r\n  const confirmedData = covidData.confirmed;\r\n\r\n  const countries = confirmedData.locations.reduce((agg, country) => {\r\n    const countryName = country.country;\r\n    if (!agg[countryName]) {\r\n      agg[countryName] = {\r\n        name: countryName,\r\n        cases: country.latest,\r\n        history: country.history\r\n      }\r\n    } else {\r\n      agg[countryName] = {\r\n        name: countryName,\r\n        cases: country.latest + agg[countryName].cases,\r\n        history: mergeHistory(country.history, agg[countryName].history)\r\n      }\r\n    }\r\n    return agg;\r\n  }, {});\r\n\r\n  return countries;\r\n}\r\n\r\n// Helper function based on an idea that the transformation is basically taking the value from each coutry,\r\n// apply filters, process it, and post processing the result in some whay.\r\n// This will return a function that will be used as a transformation for the Data Manager\r\nexport function processData(preProcess, process, postProcess) {\r\n  return (covidData) => {\r\n    const data = Object.keys(covidData).map(countryName => {\r\n      const preData = preProcess ? preProcess(countryName)(covidData) : countryName;\r\n      return process ? process(countryName)(covidData, preData) : preData;\r\n    })\r\n    return postProcess ? postProcess(data) : data;\r\n  }\r\n}\r\n\r\n// Pre Processing Functions\r\n// ############################################################\r\n\r\n// Returns a function that will filter the countries that only have 1000 cases or more\r\nexport const getCountriesWithNCasesOrMore = (n) => (countryName) => {\r\n  return (covidData) => {\r\n    const historyKeys = Object.keys(covidData[countryName].history).filter(date => {\r\n      return covidData[countryName].history[date] > 0 && covidData[countryName].cases >= n;\r\n    });\r\n\r\n    historyKeys.sort(function (a, b) {\r\n      a = new Date(a);\r\n      b = new Date(b);\r\n      return a.getTime() - b.getTime();\r\n    });\r\n\r\n    return historyKeys;\r\n  }\r\n}\r\n\r\n// Returns a function that will filter the countries that only have 7 days or more since having its first case\r\nexport function getCountriesWith7DaysOrMore(countryName) {\r\n  return (covidData) => {\r\n    const historyKeys = Object.keys(covidData[countryName].history).filter(date => covidData[countryName].history[date] > 0);\r\n    if (historyKeys.length >= 7) {\r\n\r\n      historyKeys.sort(function (a, b) {\r\n        a = new Date(a);\r\n        b = new Date(b);\r\n        return a.getTime() - b.getTime();\r\n      });\r\n\r\n      return historyKeys;\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n}\r\n// ############################################################\r\n\r\n// Processing Functions\r\n// ############################################################\r\n\r\n// Create weekly windows of history and calculate the linear regression for each country\r\nexport function getExpGrowthRateByCountry(countryName) {\r\n  return (covidData, historyKeys) => {\r\n    const firstDate = new Date(historyKeys[0]);\r\n\r\n    return historyKeys\r\n      .map((_, index) => historyKeys.slice(index, index + 7))\r\n      .filter(slice => slice.length === 7)\r\n      .map(slice => {\r\n        const sliceLog = slice.map(date => {\r\n          const dateCases = covidData[countryName].history[date];\r\n          const logCases = Math.log(dateCases);\r\n\r\n          const caseDate = new Date(date);\r\n          const timeDiff = caseDate.getTime() - firstDate.getTime();\r\n          const timeInDays = timeDiff / (1000 * 3600 * 24);\r\n\r\n\r\n          return [timeInDays + 7, logCases];\r\n        });\r\n\r\n        const a = regression.linear(sliceLog).equation[0];\r\n\r\n        const result = parseFloat((100 * ((Math.E ** a) - 1)).toFixed(2))\r\n\r\n        return {\r\n          name: countryName,\r\n          daysSinceFirstCase: sliceLog[0][0],\r\n          expGrowth: result\r\n        }\r\n      });\r\n  }\r\n}\r\n\r\n// Take the last week of each country and create the log of the cases value on the week \r\nexport function getLastWeekLogSlice(countryName) {\r\n  return (covidData, historyKeys) => {\r\n    const firstDate = new Date(historyKeys[0]);\r\n\r\n    const lastWeek = historyKeys.slice(-7);\r\n\r\n    return lastWeek.map(date => {\r\n      const dateCases = covidData[countryName].history[date];\r\n      const logCases = Math.log(dateCases);\r\n\r\n      const caseDate = new Date(date);\r\n      const timeDiff = caseDate.getTime() - firstDate.getTime();\r\n      const timeInDays = timeDiff / (1000 * 3600 * 24);\r\n\r\n\r\n      return [timeInDays, logCases];\r\n    });\r\n  }\r\n}\r\n// ############################################################\r\n\r\n// Post Processing functions\r\n// ############################################################\r\n\r\n// Take an array of arrays and create a one dimensional array of it\r\nexport function flatResults(parsedData) {\r\n  return [].concat.apply([], parsedData)\r\n}\r\n\r\n// Calculate the linear regression of a window and take the increase percentage rate. Group by percentage rate.\r\nexport function groupByRate(parsedData) {\r\n  const percentageRate = (a) => 100 * ((Math.E ** a) - 1);\r\n  const result = [\r\n    {\r\n      slice: '0% - 10%',\r\n      condition: (a) => percentageRate(a) <= 10,\r\n      count: 0\r\n    },\r\n    {\r\n      slice: '10% - 20%',\r\n      condition: (a) => percentageRate(a) > 10 && percentageRate(a) <= 20,\r\n      count: 0\r\n    },\r\n    {\r\n      slice: '20% - 30%',\r\n      condition: (a) => percentageRate(a) > 20 && percentageRate(a) <= 30,\r\n      count: 0\r\n    },\r\n    {\r\n      slice: '30% - 40%',\r\n      condition: (a) => percentageRate(a) > 30 && percentageRate(a) <= 40,\r\n      count: 0\r\n    },\r\n    {\r\n      slice: '40% - 50%',\r\n      condition: (a) => percentageRate(a) > 40 && percentageRate(a) <= 50,\r\n      count: 0\r\n    },\r\n    {\r\n      slice: '50% - 60%',\r\n      condition: (a) => percentageRate(a) > 50 && percentageRate(a) <= 60,\r\n      count: 0\r\n    },\r\n    {\r\n      slice: '60% - 100%',\r\n      condition: (a) => percentageRate(a) > 60 && percentageRate(a) <= 100,\r\n      count: 0\r\n    },\r\n    {\r\n      slice: '100%>',\r\n      condition: (a) => percentageRate(a) > 100,\r\n      count: 0\r\n    },\r\n  ];\r\n\r\n  const addToGroup = (rate) => {\r\n    result.forEach(type => {\r\n      if (type.condition(rate)) {\r\n        type.count++;\r\n      }\r\n    })\r\n  }\r\n\r\n  let total = 0;\r\n\r\n  parsedData.forEach(logSlice => {\r\n    if (logSlice !== []) {\r\n      const rate = regression.linear(logSlice).equation[0];\r\n\r\n      total++;\r\n\r\n      addToGroup(rate);\r\n    }\r\n  });\r\n\r\n  result.forEach(type => {\r\n    delete type.condition;\r\n    type.percent = Number((type.count / total).toFixed(4));\r\n  });\r\n\r\n  return result;\r\n}\r\n// ############################################################\r\n\r\n\r\nexport const processUntilLastWeekSlice = processData(getCountriesWith7DaysOrMore, getLastWeekLogSlice);\r\n\r\nexport const exponentialGrowthRateByCountry = (n) => processData(getCountriesWithNCasesOrMore(n), getExpGrowthRateByCountry, flatResults);","import React, { Component } from 'react';\r\nimport { Input } from 'antd';\r\n\r\nexport class IntegerInput extends Component {\r\n  onChange = (event) => {\r\n    const value = parseInt(event.target.value);\r\n    if (Number.isInteger(value) && value >= 0) {\r\n      this.props.onChange(value)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Input\r\n        {...this.props}\r\n        maxLength={11}\r\n        onChange={this.onChange}\r\n      />\r\n    );\r\n  }\r\n}","class LanguageController {\r\n  constructor() {\r\n    this.callbacks = [];\r\n  }\r\n\r\n  addCallback(callback) {\r\n    this.callbacks.push(callback);\r\n  }\r\n\r\n  onLanguageChange = (lng) => {\r\n    this.callbacks.forEach(callback => callback(lng));\r\n  }\r\n}\r\n\r\nexport const languageController = new LanguageController();","import React, { Component } from 'react';\r\nimport { Chart } from '@antv/g2';\r\nimport { dataManager } from '../data/DataManager';\r\nimport { exponentialGrowthRateByCountry } from '../data/Transformations';\r\nimport { IntegerInput } from '../helpers/IntegerInput';\r\nimport { Spin } from 'antd';\r\nimport { LoadingOutlined } from '@ant-design/icons';\r\nimport { withTranslation } from 'react-i18next';\r\nimport { languageController } from '../helpers/languageController';\r\n\r\nconst antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\r\n\r\nclass ExpGrowthRateChart extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      value: 1000,\r\n      loaded: false\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.updateChartSize);\r\n  }\r\n\r\n  updateChartSize = () => {\r\n    const parentElement = document.getElementById('expGrowthContainer');\r\n    this.chart.changeSize(parentElement.offsetWidth - 10, parentElement.offsetHeight >= 350 ? parentElement.offsetHeight - 10 : 350);\r\n  }\r\n\r\n  setAxis = () => {\r\n    this.chart.scale('daysSinceFirstCase', {\r\n      ticks: [7, 20, 40, 60],\r\n      alias: this.props.t('content.expGrowth.chart.xAxis')\r\n    });\r\n\r\n    this.chart.axis('daysSinceFirstCase', {\r\n      title: {\r\n        offset: 20,\r\n        style: {\r\n          fill: '#aaa'\r\n        }\r\n      }\r\n    });\r\n\r\n    this.chart.scale('expGrowth', {\r\n      alias: this.props.t('content.expGrowth.chart.yAxis')\r\n    });\r\n\r\n    this.chart.axis('expGrowth', {\r\n      title: {\r\n        offset: 20,\r\n        style: {\r\n          fill: '#aaa'\r\n        }\r\n      }\r\n    });\r\n\r\n    this.chart.tooltip({\r\n      showCrosshairs: true,\r\n    });\r\n\r\n    this.chart.render();\r\n  }\r\n\r\n  updateChart = (covidData, filterNumberOfCases = 1000) => {\r\n    this.setState({ loaded: true })\r\n    covidData = exponentialGrowthRateByCountry(filterNumberOfCases)(covidData);\r\n\r\n    this.chart.changeData(covidData);\r\n\r\n    this.chart\r\n      .line()\r\n      .position('daysSinceFirstCase*expGrowth')\r\n      .color('name')\r\n      .shape('smooth')\r\n      .animate(false);\r\n\r\n    this.setAxis();\r\n    this.updateChartSize();\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('resize', this.updateChartSize);\r\n    const element = document.getElementById('expGrowthContainer');\r\n    this.chart = new Chart({\r\n      container: element,\r\n      height: 0,\r\n      renderer: 'canvas'\r\n    });\r\n\r\n    dataManager.registerListener('base', this.updateChart);\r\n    languageController.addCallback(this.setAxis);\r\n  }\r\n\r\n  onChange = (value) => {\r\n    this.setState({ value });\r\n\r\n    // Debounce value to not redraw the chart too many times\r\n    clearTimeout(this.timeout);\r\n    this.timeout = setTimeout(() => this.updateChart(dataManager.getData('base'), value), 200)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"chart\" id=\"expGrowthContainer\">\r\n          {this.state.loaded ? null : <Spin indicator={antIcon} />}\r\n        </div>\r\n        <div className=\"inpFlex\">\r\n        <span>{this.props.t('content.expGrowth.chart.numCases')}: </span>\r\n          <IntegerInput value={this.state.value} onChange={this.onChange} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withTranslation()(ExpGrowthRateChart)","import React, { Component } from 'react';\r\n\r\nexport class InfoPanel extends Component {\r\n  render() {\r\n    return(\r\n      <div className=\"InfoPanel container\">\r\n        <h2>{this.props.title}</h2>\r\n        { this.props.children }\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { Chart } from '@antv/g2';\r\nimport { dataManager } from '../data/DataManager';\r\nimport { groupByRate } from '../data/Transformations';\r\nimport { Spin } from 'antd';\r\nimport { LoadingOutlined } from '@ant-design/icons';\r\n\r\nconst antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\r\n\r\nexport class GrowthRatePie extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      loaded: false\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.updateChartSize);\r\n  }\r\n\r\n  updateChartSize = () => {\r\n    const element = document.getElementById('growthRatePieContainer');\r\n    this.chart.changeSize(element.offsetWidth - 10, element.offsetHeight >= 350 ? element.offsetHeight - 42 : 350);\r\n  }\r\n\r\n  updateData = (covidData) => {\r\n    this.setState({ loaded: true })\r\n    covidData = groupByRate(covidData);\r\n\r\n    this.chart.changeData(covidData);\r\n\r\n    this.chart\r\n      .interval()\r\n      .position('percent')\r\n      .color('slice')\r\n      .tooltip('slice*percent', (slice, percent) => {\r\n        return {\r\n          name: slice,\r\n          value: `${(percent * 100).toFixed(0)}%`\r\n        };\r\n      })\r\n      .adjust('stack');\r\n\r\n    this.chart.interaction('element-active');\r\n\r\n    this.chart.coordinate('theta', {\r\n      radius: 0.75,\r\n    });\r\n\r\n    this.chart.tooltip({\r\n      showTitle: false,\r\n      showMarkers: false\r\n    });\r\n\r\n    this.chart.render();\r\n    this.updateChartSize();\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('resize', this.updateChartSize);\r\n    const element = document.getElementById('growthRatePieContainer');\r\n\r\n    this.chart = new Chart({\r\n      container: element,\r\n      height: 0,\r\n      renderer: 'canvas'\r\n    });\r\n\r\n    this.chart.coordinate('theta', {\r\n      radius: 0.75,\r\n    });\r\n\r\n    dataManager.registerListener('lastWeekSlice', this.updateData);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"growthRatePieContainer\" className=\"container chart\">\r\n        {this.state.loaded ? null : <Spin indicator={antIcon} />}\r\n      </div>\r\n    );\r\n  }\r\n}","import React from \"react\";\r\nimport { Layout, Radio } from 'antd';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { languageController } from \"./helpers/languageController\";\r\n\r\nconst { Header } = Layout;\r\n\r\nexport function AppHeader() {\r\n  const { t, i18n } = useTranslation();\r\n  const onLangSelected = (e) => {\r\n    const lng = e.target.value;\r\n    i18n.changeLanguage(lng, languageController.onLanguageChange);\r\n  }\r\n\r\n  return (\r\n    <Header className=\"header\">\r\n      <div className=\"headerContent\">\r\n        <span className=\"title\">{t('header.title')}</span>\r\n        <a className=\"link\" rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://www.medrxiv.org/content/10.1101/2020.03.19.20037192v1\">\r\n          {t('header.article')}\r\n        </a>\r\n      </div>\r\n      <Radio.Group defaultValue=\"en\" size=\"small\" onChange={onLangSelected}>\r\n        <Radio.Button value=\"en\">EN</Radio.Button>\r\n        <Radio.Button value=\"pt\">PT</Radio.Button>\r\n      </Radio.Group>\r\n    </Header>\r\n  );\r\n}","import React, { Component } from 'react';\r\nimport data from 'jhucsse.covid'\r\nimport ExpGrowthRateChart from './charts/ExpGrowthRate';\r\nimport '../style/App.css';\r\nimport { InfoPanel } from './InfoPanel';\r\nimport { GrowthRatePie } from './charts/GrowthRatePie';\r\nimport { dataManager } from './data/DataManager';\r\nimport { groupConfirmedByCountryName, processUntilLastWeekSlice } from './data/Transformations';\r\nimport { Layout, Button, Modal } from 'antd';\r\nimport { AppHeader } from './Header';\r\nimport { Translation } from 'react-i18next';\r\n\r\nconst { Footer, Content } = Layout;\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      modalVisible: false\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    data.all().then((covidData) => {\r\n      dataManager.registerDataFromTransformation('base', covidData, groupConfirmedByCountryName);\r\n      dataManager.registerDataFromTransformation('lastWeekSlice', 'base', processUntilLastWeekSlice);\r\n    });\r\n  }\r\n\r\n  showDataDisclaimer = () => {\r\n    this.setState({ modalVisible: true });\r\n  }\r\n\r\n  handleCancel = () => {\r\n    this.setState({ modalVisible: false });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Translation>\r\n        {\r\n          t => (\r\n            <Layout className=\"App\">\r\n              <AppHeader />\r\n              <Content className=\"content\">\r\n                <div className=\"mainContainer\">\r\n                  <div className=\"row\">\r\n                    <ExpGrowthRateChart />\r\n                    <InfoPanel title={t('content.expGrowth.title')}>\r\n                      <p>\r\n                        {t('content.expGrowth.content.1')}\r\n                        <br />\r\n                        <br />\r\n                        {t('content.expGrowth.content.2')}\r\n                        <br />\r\n                        <br />\r\n                        {t('content.expGrowth.content.3')}\r\n                        <br />\r\n                        <br />\r\n                        {t('content.expGrowth.content.4')}\r\n                        </p>\r\n                    </InfoPanel>\r\n                  </div>\r\n                  <div className=\"row\">\r\n                    <InfoPanel title={t('content.growthRate.title')}>\r\n                      <p>\r\n                        {t('content.growthRate.content.1')}\r\n                        <br />\r\n                        <br />\r\n                        {t('content.growthRate.content.2')}\r\n                        <br />\r\n                        <br />\r\n                        {t('content.growthRate.content.3')}\r\n                      </p>\r\n                    </InfoPanel>\r\n                    <GrowthRatePie />\r\n                  </div>\r\n                </div>\r\n                <Modal\r\n                  title={t('footer.disclaimer.title')}\r\n                  visible={this.state.modalVisible}\r\n                  footer={null}\r\n                  onCancel={this.handleCancel}\r\n                >\r\n                  <p>\r\n                    {t('footer.disclaimer.content.1')}\r\n                    <br />\r\n                    <a className=\"link\" rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://github.com/CSSEGISandData/COVID-19\">\r\n                      JHU CSSE 2020\r\n                    </a>.\r\n                    <br />\r\n                    <br />\r\n                    {t('footer.disclaimer.content.2')}\r\n                    <br />\r\n                    <a className=\"link\" rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://www.medrxiv.org/content/10.1101/2020.03.19.20037192v1\">\r\n                      Trend analysis of the COVID-19 pandemic in China and the rest of the world, Albertine Weber, Flavio Iannelli, Sebastian Gonçalves\r\n                    </a>.\r\n                  </p>\r\n                </Modal>\r\n              </Content>\r\n              <Footer className=\"footer\">\r\n                <span>{t('footer.madeBy')}</span>\r\n                <span>\r\n                  <Button type=\"link\" onClick={this.showDataDisclaimer}>\r\n                    {t('footer.disclaimer.title')}\r\n                  </Button>\r\n                </span>\r\n              </Footer>\r\n            </Layout>\r\n          )\r\n        }\r\n      </Translation>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './style/index.css';\r\nimport './i18n';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}